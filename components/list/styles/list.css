.dtw9l {
    list-style-type: none;
    margin: unset;
    padding-inline-start: unset;
    --gr-borderWidth: var(--bd-borderWidth);
    --gr-borderStartStartRadius: var(--bd-borderStartStartRadius);
    --gr-borderStartEndRadius: var(--bd-borderStartEndRadius);
    --gr-borderEndStartRadius: var(--bd-borderEndStartRadius);
    --gr-borderEndEndRadius: var(--bd-borderEndEndRadius);
    --gr-paddingInline: var(--pd-paddingInline);
    --gr-paddingBlock: var(--pd-paddingBlock);
    justify-content: start;
    align-items: stretch;
    flex-wrap: nowrap;
    min-inline-size: 0;
    border-style: var(--list-borderStyle);
    border-width: var(--list-borderWidth);
    border-color: var(--list-borderColor);
    border-radius: var(--list-borderRadius);
    transition: var(--list-transition);
    --gd-backgGrad: var(--bsc-backgGrad);
    --gd-gradientSw: var(--gd-gradientPr);
    --gd-backgGradTg: var(--gd-gradientSw) var(--gd-backgGrad);
    --ol-outlinedSw: var(--ol-outlinedPr);
    --ol-backgFn: var(--th-backgMildCond, var(--th-backgMild, var(--bsc-backg)));
    --ol-foregFn: var(--th-foregOutlinedCond, var(--th-foregOutlined, var(--bsc-foreg)));
    --ol-altBackgFn: var(--th-altBackgOutlinedCond, var(--th-altBackgOutlined, var(--bsc-altBackg)));
    --ol-altForegFn: var(--th-altForegOutlinedCond, var(--th-altForegOutlined, var(--bsc-altForeg)));
    --ol-noBackgTg: var(--ol-outlinedSw) transparent;
    --ol-backgTg: var(--ol-outlinedSw) var(--ol-backgFn);
    --ol-foregTg: var(--ol-outlinedSw) var(--ol-foregFn);
    --ol-altBackgTg: var(--ol-outlinedSw) var(--ol-altBackgFn);
    --ol-altForegTg: var(--ol-outlinedSw) var(--ol-altForegFn);
    --mi-mildSw: var(--mi-mildPr);
    --mi-backgFn: var(--th-backgMildCond, var(--th-backgMild, var(--bsc-backg)));
    --mi-foregFn: var(--th-foregMildCond, var(--th-foregMild, var(--bsc-foreg)));
    --mi-altBackgFn: var(--th-altBackgMildCond, var(--th-altBackgMild, var(--bsc-altBackg)));
    --mi-altForegFn: var(--th-altForegMildCond, var(--th-altForegMild, var(--bsc-altForeg)));
    --mi-backgTg: var(--mi-mildSw) var(--mi-backgFn);
    --mi-foregTg: var(--mi-mildSw) var(--mi-foregFn);
    --mi-altBackgTg: var(--mi-mildSw) var(--mi-altBackgFn);
    --mi-altForegTg: var(--mi-mildSw) var(--mi-altForegFn);
    --nu-nudeSw: var(--nu-nudePr);
    --ac-filterActive: var(--indi-filterActive);
    --ac-animActive: var(--indi-animActive);
    --ac-animPassive: var(--indi-animPassive);
}

.dtw9l>:where(li) {
    display: unset;
    text-align: unset;
}

.dtw9l:is(.inline, .inline-start, .inline-end) {
    display: inline-flex;
    flex-direction: row;
}

.dtw9l:is(.inline, .inline-start, .inline-end)>*:not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    --gr-borderWidth: inherit !important;
    --gr-borderStartStartRadius: inherit;
    --gr-borderEndStartRadius: inherit;
    --bd-borderStartStartRadius: calc(var(--gr-borderStartStartRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
    --bd-borderEndStartRadius: calc(var(--gr-borderEndStartRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
}

.dtw9l:is(.inline, .inline-start, .inline-end)>*:not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    --gr-borderWidth: inherit !important;
    --gr-borderStartEndRadius: inherit;
    --gr-borderEndEndRadius: inherit;
    --bd-borderStartEndRadius: calc(var(--gr-borderStartEndRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
    --bd-borderEndEndRadius: calc(var(--gr-borderEndEndRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
}

.dtw9l:not(:is(.inline, .inline-start, .inline-end)) {
    display: flex;
    flex-direction: column;
}

.dtw9l:not(:is(.inline, .inline-start, .inline-end))>*:not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    --gr-borderWidth: inherit !important;
    --gr-borderStartStartRadius: inherit;
    --gr-borderStartEndRadius: inherit;
    --bd-borderStartStartRadius: calc(var(--gr-borderStartStartRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
    --bd-borderStartEndRadius: calc(var(--gr-borderStartEndRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
}

.dtw9l:not(:is(.inline, .inline-start, .inline-end))>*:not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    --gr-borderWidth: inherit !important;
    --gr-borderEndStartRadius: inherit;
    --gr-borderEndEndRadius: inherit;
    --bd-borderEndStartRadius: calc(var(--gr-borderEndStartRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
    --bd-borderEndEndRadius: calc(var(--gr-borderEndEndRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
}

.dtw9l>*,
.dtw9l {
    --bd-borderColorFn: var(--th-borderCond, var(--th-border, var(--list-borderColor)));
    --bd-borderColor: var(--ol-foregTg, var(--bd-borderColorFn));
    --bd-borderStyle: var(--list-borderStyle);
    --bd-borderWidth: var(--list-borderWidth);
    --bd-border: var(--bd-borderStyle) var(--bd-borderWidth) var(--bd-borderColor);
    --bd-borderStartStartRadius: var(--list-borderRadius);
    --bd-borderStartEndRadius: var(--list-borderRadius);
    --bd-borderEndStartRadius: var(--list-borderRadius);
    --bd-borderEndEndRadius: var(--list-borderRadius);
    --bd-borderRadius: var(--bd-borderStartStartRadius) var(--bd-borderStartEndRadius) var(--bd-borderEndEndRadius) var(--bd-borderEndStartRadius);
    border: var(--bd-border);
    border-start-start-radius: var(--bd-borderStartStartRadius);
    border-start-end-radius: var(--bd-borderStartEndRadius);
    border-end-start-radius: var(--bd-borderEndStartRadius);
    border-end-end-radius: var(--bd-borderEndEndRadius);
}

.dtw9l>* {
    display: flex;
    flex-direction: inherit;
    justify-content: inherit;
    align-items: inherit;
    flex-wrap: inherit;
    flex: 1 1 auto;
    transition: var(--list-transition), border-width 0s;
}

:is(.inline, .inline-start, .inline-end).dtw9l>* {
    --gr-borderWidth: 0px;
    border-block-width: 0;
}

:is(.inline, .inline-start, .inline-end).dtw9l>*:not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    border-inline-start-width: 0;
}

:is(.inline, .inline-start, .inline-end).dtw9l>*:not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    border-inline-end-width: 0;
}

:is(.inline, .inline-start, .inline-end).dtw9l>*+*:not(:where(.overlay, .foreign)) {
    border-inline-start-width: 0;
}

:is(.inline, .inline-start, .inline-end).dtw9l>*:not(:where(.overlay, .foreign, :first-child, .first-visible-child)) {
    --bd-borderStartStartRadius: 0px;
    --bd-borderEndStartRadius: 0px;
}

:is(.inline, .inline-start, .inline-end).dtw9l>*:not(:where(.overlay, .foreign, :last-child, .last-visible-child)) {
    --bd-borderStartEndRadius: 0px;
    --bd-borderEndEndRadius: 0px;
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l>* {
    --gr-borderWidth: 0px;
    border-inline-width: 0;
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l>*:not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    border-block-start-width: 0;
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l>*:not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    border-block-end-width: 0;
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l>*+*:not(:where(.overlay, .foreign)) {
    border-block-start-width: 0;
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l>*:not(:where(.overlay, .foreign, :first-child, .first-visible-child)) {
    --bd-borderStartStartRadius: 0px;
    --bd-borderStartEndRadius: 0px;
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l>*:not(:where(.overlay, .foreign, :last-child, .last-visible-child)) {
    --bd-borderEndStartRadius: 0px;
    --bd-borderEndEndRadius: 0px;
}

.dtw9l>*:where(.fluid:not(.solid)) {
    flex-basis: 100%;
}

.dtw9l>*:where(.solid:not(.fluid)) {
    flex-grow: 0;
    flex-shrink: 0;
}

.dtw9l>*:where(.fluid.solid) {
    flex-shrink: 0;
}

:is(.inline, .inline-start, .inline-end).dtw9l>*>:not(_):not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    --bd-borderStartStartRadius: inherit;
    --bd-borderEndStartRadius: inherit;
}

:is(.inline, .inline-start, .inline-end).dtw9l>*>:not(_):not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    --bd-borderStartEndRadius: inherit;
    --bd-borderEndEndRadius: inherit;
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l>*>:not(_):not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    --bd-borderStartStartRadius: inherit;
    --bd-borderStartEndRadius: inherit;
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l>*>:not(_):not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    --bd-borderEndStartRadius: inherit;
    --bd-borderEndEndRadius: inherit;
}

.dtw9l.content.szSm {
    --ct-paddingInline: var(--ct-paddingInlineSm);
    --ct-paddingBlock: var(--ct-paddingBlockSm);
}

.dtw9l.content.szLg {
    --ct-paddingInline: var(--ct-paddingInlineLg);
    --ct-paddingBlock: var(--ct-paddingBlockLg);
}

.dtw9l.content>*>* {
    transition: var(--ct-transition);
    padding-inline: var(--pd-paddingInline);
    padding-block: var(--pd-paddingBlock);
    border: var(--bd-border);
    border-start-start-radius: var(--bd-borderStartStartRadius);
    border-start-end-radius: var(--bd-borderStartEndRadius);
    border-end-start-radius: var(--bd-borderEndStartRadius);
    border-end-end-radius: var(--bd-borderEndEndRadius);
    --bd-borderColorFn: var(--th-borderCond, var(--th-border));
    --bd-borderColor: var(--ol-foregTg, var(--bd-borderColorFn));
    --bd-border: var(--bd-borderStyle) var(--bd-borderWidth) var(--bd-borderColor);
    --bd-borderRadius: var(--bd-borderStartStartRadius) var(--bd-borderStartEndRadius) var(--bd-borderEndEndRadius) var(--bd-borderEndStartRadius);
    --pd-paddingInline: var(--ct-paddingInline);
    --pd-paddingBlock: var(--ct-paddingBlock);
    --pd-padding: var(--pd-paddingBlock) var(--pd-paddingInline);
    --gr-borderWidth: var(--bd-borderWidth);
    --gr-borderStartStartRadius: var(--bd-borderStartStartRadius);
    --gr-borderStartEndRadius: var(--bd-borderStartEndRadius);
    --gr-borderEndStartRadius: var(--bd-borderEndStartRadius);
    --gr-borderEndEndRadius: var(--bd-borderEndEndRadius);
    --gr-paddingInline: var(--pd-paddingInline);
    --gr-paddingBlock: var(--pd-paddingBlock);
    --ct-transition: var(--list-contentTransition), border-width 0s;
    --ct-mediaTransition: var(--ct-transition);
}

.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_) {
    margin: unset;
    --gr-borderWidth: var(--bd-borderWidth);
    --gr-borderStartStartRadius: var(--bd-borderStartStartRadius);
    --gr-borderStartEndRadius: var(--bd-borderStartEndRadius);
    --gr-borderEndStartRadius: var(--bd-borderEndStartRadius);
    --gr-borderEndEndRadius: var(--bd-borderEndEndRadius);
    --gr-paddingInline: var(--pd-paddingInline);
    --gr-paddingBlock: var(--pd-paddingBlock);
    display: flex;
    flex-direction: column;
    justify-content: start;
    align-items: stretch;
    flex-wrap: nowrap;
}

.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_):is(.inline, .inline-start, .inline-end)>*:not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    --gr-borderWidth: inherit !important;
    --gr-borderStartStartRadius: inherit;
    --gr-borderEndStartRadius: inherit;
    --bd-borderStartStartRadius: calc(var(--gr-borderStartStartRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
    --bd-borderEndStartRadius: calc(var(--gr-borderEndStartRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
}

.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_):is(.inline, .inline-start, .inline-end)>*:not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    --gr-borderWidth: inherit !important;
    --gr-borderStartEndRadius: inherit;
    --gr-borderEndEndRadius: inherit;
    --bd-borderStartEndRadius: calc(var(--gr-borderStartEndRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
    --bd-borderEndEndRadius: calc(var(--gr-borderEndEndRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
}

.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_):not(:is(.inline, .inline-start, .inline-end))>*:not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    --gr-borderWidth: inherit !important;
    --gr-borderStartStartRadius: inherit;
    --gr-borderStartEndRadius: inherit;
    --bd-borderStartStartRadius: calc(var(--gr-borderStartStartRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
    --bd-borderStartEndRadius: calc(var(--gr-borderStartEndRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
}

.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_):not(:is(.inline, .inline-start, .inline-end))>*:not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    --gr-borderWidth: inherit !important;
    --gr-borderEndStartRadius: inherit;
    --gr-borderEndEndRadius: inherit;
    --bd-borderEndStartRadius: calc(var(--gr-borderEndStartRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
    --bd-borderEndEndRadius: calc(var(--gr-borderEndEndRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
}

:where(.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_))>* {
    --bd-borderColorFn: var(--th-borderCond, var(--th-border));
    --bd-borderColor: var(--ol-foregTg, var(--bd-borderColorFn));
    --bd-border: var(--bd-borderStyle) var(--bd-borderWidth) var(--bd-borderColor);
    --bd-borderStartStartRadius: initial;
    --bd-borderStartEndRadius: initial;
    --bd-borderEndStartRadius: initial;
    --bd-borderEndEndRadius: initial;
    --bd-borderRadius: var(--bd-borderStartStartRadius) var(--bd-borderStartEndRadius) var(--bd-borderEndEndRadius) var(--bd-borderEndStartRadius);
    border: var(--bd-border);
    border-start-start-radius: var(--bd-borderStartStartRadius);
    border-start-end-radius: var(--bd-borderStartEndRadius);
    border-end-start-radius: var(--bd-borderEndStartRadius);
    border-end-end-radius: var(--bd-borderEndEndRadius);
    --gr-borderWidth: 0px;
    border-inline-width: 0;
}

:where(.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_))>*:is(.inline, .inline-start, .inline-end) {
    --gr-borderWidth: 0px;
    border-block-width: 0;
}

:where(.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_))>*:is(.inline, .inline-start, .inline-end):not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    border-inline-start-width: 0;
}

:where(.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_))>*:is(.inline, .inline-start, .inline-end):not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    border-inline-end-width: 0;
}

:where(.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_))>*:is(.inline, .inline-start, .inline-end)+*:not(:where(.overlay, .foreign)) {
    border-inline-start-width: 0;
}

:where(.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_))>*:is(.inline, .inline-start, .inline-end):not(:where(.overlay, .foreign, :first-child, .first-visible-child)) {
    --bd-borderStartStartRadius: 0px;
    --bd-borderEndStartRadius: 0px;
}

:where(.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_))>*:is(.inline, .inline-start, .inline-end):not(:where(.overlay, .foreign, :last-child, .last-visible-child)) {
    --bd-borderStartEndRadius: 0px;
    --bd-borderEndEndRadius: 0px;
}

:where(.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_))>*:not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    border-block-start-width: 0;
}

:where(.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_))>*:not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    border-block-end-width: 0;
}

:where(.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_))>*+*:not(:where(.overlay, .foreign)) {
    border-block-start-width: 0;
}

:where(.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_))>*:not(:where(.overlay, .foreign, :first-child, .first-visible-child)) {
    --bd-borderStartStartRadius: 0px;
    --bd-borderStartEndRadius: 0px;
}

:where(.dtw9l.content>*>*>:where(figure):not(:where(.not-media)):nth-child(n):not(_))>*:not(:where(.overlay, .foreign, :last-child, .last-visible-child)) {
    --bd-borderEndStartRadius: 0px;
    --bd-borderEndEndRadius: 0px;
}

.dtw9l.content>*>*>:is(:where(img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_), :where(figure):not(:where(.not-media))>:where(img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_)) {
    transition: var(--ct-mediaTransition), border-width 0s;
}

.dtw9l.content>*>*>:is(:where(img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_), :where(figure):not(:where(.not-media))>:where(img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_)):where(:not(.media)):where(img, svg, video, picture, object) {
    display: block;
}

.dtw9l.content>*>*>:is(:where(img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_), :where(figure):not(:where(.not-media))>:where(img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_)):where(:not(.media)):where(img, svg, video, object) {
    width: 100%;
    width: -moz-available;
    width: -webkit-fill-available;
    box-sizing: border-box;
    width: fill-available;
}

.dtw9l.content>*>*>:is(:where(img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_), :where(figure):not(:where(.not-media))>:where(img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_)):where(:not(.media)):where(figure) {
    margin: unset;
}

.dtw9l.content>*>*>:is(:where(img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_), :where(figure):not(:where(.not-media))>:where(img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_)):where(:not(.media)):where(img, svg:not(:root), video) {
    overflow: unset;
    overflow-clip-margin: unset;
}

.dtw9l.content>*>*>:where(a, .link):not(:where(.not-link)):nth-child(n):not(_)+:where(a, .link):not(:where(.not-link)) {
    margin-inline-start: var(--ct-linkSpacing);
}

.dtw9l.content>*>*:is(.inline, .inline-start, .inline-end)>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    --gr-borderWidth: inherit !important;
    --gr-borderStartStartRadius: inherit;
    --gr-borderEndStartRadius: inherit;
    --bd-borderStartStartRadius: calc(var(--gr-borderStartStartRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
    --bd-borderEndStartRadius: calc(var(--gr-borderEndStartRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
}

.dtw9l.content>*>*:is(.inline, .inline-start, .inline-end)>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    --gr-borderWidth: inherit !important;
    --gr-borderStartEndRadius: inherit;
    --gr-borderEndEndRadius: inherit;
    --bd-borderStartEndRadius: calc(var(--gr-borderStartEndRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
    --bd-borderEndEndRadius: calc(var(--gr-borderEndEndRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
}

.dtw9l.content>*>*:not(:is(.inline, .inline-start, .inline-end))>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    --gr-borderWidth: inherit !important;
    --gr-borderStartStartRadius: inherit;
    --gr-borderStartEndRadius: inherit;
    --bd-borderStartStartRadius: calc(var(--gr-borderStartStartRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
    --bd-borderStartEndRadius: calc(var(--gr-borderStartEndRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
}

.dtw9l.content>*>*:not(:is(.inline, .inline-start, .inline-end))>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    --gr-borderWidth: inherit !important;
    --gr-borderEndStartRadius: inherit;
    --gr-borderEndEndRadius: inherit;
    --bd-borderEndStartRadius: calc(var(--gr-borderEndStartRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
    --bd-borderEndEndRadius: calc(var(--gr-borderEndEndRadius) - var(--gr-borderWidth) - min(var(--gr-borderWidth), 0.5px));
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_) {
    inline-size: calc(100% + (var(--gr-paddingInline) * 2));
    border: var(--bd-border);
    border-start-start-radius: var(--bd-borderStartStartRadius);
    border-start-end-radius: var(--bd-borderStartEndRadius);
    border-end-start-radius: var(--bd-borderEndStartRadius);
    border-end-end-radius: var(--bd-borderEndEndRadius);
    --bd-borderColorFn: var(--th-borderCond, var(--th-border));
    --bd-borderColor: var(--ol-foregTg, var(--bd-borderColorFn));
    --bd-border: var(--bd-borderStyle) var(--bd-borderWidth) var(--bd-borderColor);
    --bd-borderRadius: var(--bd-borderStartStartRadius) var(--bd-borderStartEndRadius) var(--bd-borderEndEndRadius) var(--bd-borderEndStartRadius);
    --gr-borderWidth: 0px;
    border-inline-width: 0;
    box-sizing: border-box;
    inline-size: fill-available;
    margin-inline: calc(0px - var(--gr-paddingInline));
    margin-block-end: var(--gr-paddingBlock);
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):is(.inline, .inline-start, .inline-end) {
    --gr-borderWidth: 0px;
    border-block-width: 0;
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):is(.inline, .inline-start, .inline-end):not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    border-inline-start-width: 0;
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):is(.inline, .inline-start, .inline-end):not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    border-inline-end-width: 0;
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):is(.inline, .inline-start, .inline-end)+:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):not(:where(.overlay, .foreign)) {
    border-inline-start-width: 0;
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):is(.inline, .inline-start, .inline-end):not(:where(.overlay, .foreign, :first-child, .first-visible-child)) {
    --bd-borderStartStartRadius: 0px;
    --bd-borderEndStartRadius: 0px;
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):is(.inline, .inline-start, .inline-end):not(:where(.overlay, .foreign, :last-child, .last-visible-child)) {
    --bd-borderStartEndRadius: 0px;
    --bd-borderEndEndRadius: 0px;
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):not(:where(.overlay, .foreign, :first-child, .first-visible-child)) {
    --bd-borderStartStartRadius: 0px;
    --bd-borderStartEndRadius: 0px;
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):not(:where(.overlay, .foreign, :last-child, .last-visible-child)) {
    --bd-borderEndStartRadius: 0px;
    --bd-borderEndEndRadius: 0px;
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):not(:where(.overlay, .foreign)):where(:first-child, .first-visible-child) {
    border-block-start-width: 0;
    margin-block-start: calc(0px - var(--gr-paddingBlock));
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_):not(:where(.overlay, .foreign)):where(:last-child, .last-visible-child) {
    border-block-end-width: 0;
    margin-block-end: calc(0px - var(--gr-paddingBlock));
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_)+:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)) {
    margin-block-start: calc(0px - var(--gr-paddingBlock));
}

.dtw9l.content>*>*>:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):nth-child(n):not(_)+:where(figure, img, svg, video, picture, embed, object, .media):not(:where(.not-media)):not(:where(.overlay, .foreign)) {
    border-block-start-width: 0;
}

.dtw9l:is(.flat, .flush, .button, .tab, .breadcrumb, .bullet) {
    --bd-borderWidth: 0px;
    --bd-borderStartStartRadius: 0px;
    --bd-borderStartEndRadius: 0px;
    --bd-borderEndStartRadius: 0px;
    --bd-borderEndEndRadius: 0px;
}

.dtw9l:is(.flat, .joined, .button, .tab, .breadcrumb, .bullet)>* {
    --bd-borderWidth: 0px;
}

.dtw9l.button.button {
    gap: var(--list-buttonSpacing);
}

.dtw9l.button.button>*>:where(:first-child) {
    --fo-boxShadow: var(--an-boxShadowNone);
    --ex-filter: var(--an-filterNone);
    --di-filter: var(--an-filterNone);
    --ac-filter: var(--an-filterNone);
    --in-filter: var(--an-filterNone);
    --cl-filter: var(--an-filterNone);
    --ex-anim: var(--an-animNone);
    --co-anim: var(--an-animNone);
    --di-anim: var(--an-animNone);
    --ac-anim: var(--an-animNone);
    --fo-anim: var(--an-animNone);
    --in-anim: var(--an-animNone);
    --cl-anim: var(--an-animNone);
    --iv-animValid: var(--an-animNone);
    --iv-animInvalid: var(--an-animNone);
    appearance: none;
    box-sizing: unset;
    background-color: unset;
    color: unset;
    margin: unset;
    padding: unset;
    font: unset;
    text-rendering: unset;
    text-transform: unset;
    text-indent: unset;
    text-shadow: unset;
    letter-spacing: unset;
    word-spacing: unset;
    background: var(--bg-backg);
    color: var(--fg-foreg);
    border-style: var(--bsc-borderStyle);
    border-width: var(--bsc-borderWidth);
    border-color: var(--bsc-borderColor);
    border-radius: var(--bsc-borderRadius);
    transition-duration: var(--bsc-transitionDuration);
    transition: var(--bsc-transition);
    padding-inline: var(--pd-paddingInline);
    padding-block: var(--pd-paddingBlock);
    font-size: var(--bsc-fontSize);
    font-family: var(--bsc-fontFamily);
    font-weight: var(--bsc-fontWeight);
    font-style: var(--bsc-fontStyle);
    text-decoration: var(--bsc-textDecoration);
    line-height: var(--bsc-lineHeight);
    border: var(--bd-border);
    border-start-start-radius: var(--bd-borderStartStartRadius);
    border-start-end-radius: var(--bd-borderStartEndRadius);
    border-end-start-radius: var(--bd-borderEndStartRadius);
    border-end-end-radius: var(--bd-borderEndEndRadius);
    box-shadow: var(--an-boxShadow);
    filter: var(--an-filter);
    animation: var(--an-anim);
    --bg-backgNone: linear-gradient(transparent, transparent) border-box;
    --bg-backgColorFn: var(--th-backgCond, var(--th-backg, var(--bsc-backg)));
    --bg-altBackgColorFn: var(--th-altBackgCond, var(--th-altBackg, var(--bsc-altBackg)));
    --bg-backgColor: var(--ol-backgTg, var(--mi-backgTg, var(--bg-backgColorFn)));
    --bg-altBackgColor: var(--ol-altBackgTg, var(--mi-altBackgTg, var(--bg-altBackgColorFn)));
    --bg-backg: var(--gd-backgGradTg, var(--bg-backgNone)), var(--ol-noBackgTg, var(--bg-backgColor));
    --bg-altBackg: var(--gd-backgGradTg, var(--bg-backgNone)), var(--ol-noBackgTg, var(--bg-altBackgColor));
    --fg-foregFn: var(--th-foregCond, var(--th-foreg, var(--bsc-foreg)));
    --fg-altForegFn: var(--th-altForegCond, var(--th-altForeg, var(--bsc-altForeg)));
    --fg-foreg: var(--ol-foregTg, var(--mi-foregTg, var(--fg-foregFn)));
    --fg-altForeg: var(--ol-altForegTg, var(--mi-altForegTg, var(--fg-altForegFn)));
    --bd-borderColorFn: var(--th-borderCond, var(--th-border, var(--bsc-borderColor)));
    --bd-borderColor: var(--ol-foregTg, var(--bd-borderColorFn));
    --bd-borderStyle: var(--bsc-borderStyle);
    --bd-borderWidth: var(--bsc-borderWidth);
    --bd-border: var(--bd-borderStyle) var(--bd-borderWidth) var(--bd-borderColor);
    --bd-borderStartStartRadius: var(--bsc-borderRadius);
    --bd-borderStartEndRadius: var(--bsc-borderRadius);
    --bd-borderEndStartRadius: var(--bsc-borderRadius);
    --bd-borderEndEndRadius: var(--bsc-borderRadius);
    --bd-borderRadius: var(--bd-borderStartStartRadius) var(--bd-borderStartEndRadius) var(--bd-borderEndEndRadius) var(--bd-borderEndStartRadius);
    --ri-ringFn: var(--th-ringCond, var(--th-ring, var(--bsc-ring)));
    --ri-ring: var(--ri-ringFn);
    --an-boxShadowNone: 0 0 transparent;
    --an-filterNone: brightness(100%);
    --an-transformNone: translate(0);
    --an-animNone: none;
    --an-boxShadow: var(--fo-boxShadow), var(--an-boxShadowNone);
    --an-filter: var(--ex-filter) var(--di-filter) var(--ac-filter) var(--in-filter) var(--cl-filter) var(--an-filterNone);
    --an-transform: var(--an-transformNone);
    --an-anim: var(--ex-anim), var(--co-anim), var(--di-anim), var(--ac-anim), var(--fo-anim), var(--in-anim), var(--cl-anim), var(--iv-animValid), var(--iv-animInvalid), var(--an-animNone);
    --pd-paddingInline: var(--bsc-paddingInline);
    --pd-paddingBlock: var(--bsc-paddingBlock);
    --pd-padding: var(--pd-paddingBlock) var(--pd-paddingInline);
    position: relative;
    user-select: none;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
    vertical-align: baseline;
    text-align: center;
    column-gap: var(--btn-gapInline);
    row-gap: var(--btn-gapBlock);
    white-space: var(--btn-whiteSpace);
    flex-direction: row;
    display: flex;
}

.dtw9l.button.button>*>:where(:first-child):is(:focus, :focus-visible) {
    outline: unset;
    outline-offset: unset;
}

.dtw9l.button.button>*>:where(:first-child)::selection,
.dtw9l.button.button>*>:where(:first-child) ::selection {
    background: var(--bg-altBackgColor);
    color: var(--fg-altForeg);
}

.dtw9l.button.button>*>:where(:first-child):is(.block, .block-start, .block-end) {
    flex-direction: column;
}

.dtw9l.tab.tab:is(.inline, .inline-start, .inline-end) {
    display: flex;
}

.dtw9l.tab.tab:not(:is(.inline, .inline-start, .inline-end)) {
    display: inline-flex;
}

:is(.inline, .inline-start, .inline-end).dtw9l.tab.tab>* {
    margin-block-end: calc(0px - var(--bd-borderWidth));
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l.tab.tab>* {
    margin-inline-end: calc(0px - var(--bd-borderWidth));
}

.dtw9l.tab.tab>*>:where(:first-child) {
    background-clip: padding-box;
    text-align: var(--list-tabTextAlign);
    border: var(--bd-border);
    border-start-start-radius: var(--bd-borderStartStartRadius);
    border-start-end-radius: var(--bd-borderStartEndRadius);
    border-end-start-radius: var(--bd-borderEndStartRadius);
    border-end-end-radius: var(--bd-borderEndEndRadius);
    transition: var(--list-tabTransition), border-width 0s, padding 0s;
    --bd-borderColorFn: var(--th-borderCond, var(--th-border, var(--list-borderColor)));
    --bd-borderColor: var(--ol-foregTg, var(--bd-borderColorFn));
    --bd-borderStyle: var(--list-borderStyle);
    --bd-borderWidth: var(--list-borderWidth);
    --bd-border: var(--bd-borderStyle) var(--bd-borderWidth) var(--bd-borderColor);
    --bd-borderStartStartRadius: var(--list-borderRadius);
    --bd-borderStartEndRadius: var(--list-borderRadius);
    --bd-borderEndStartRadius: var(--list-borderRadius);
    --bd-borderEndEndRadius: var(--list-borderRadius);
    --bd-borderRadius: var(--bd-borderStartStartRadius) var(--bd-borderStartEndRadius) var(--bd-borderEndEndRadius) var(--bd-borderEndStartRadius);
}

:is(.inline, .inline-start, .inline-end).dtw9l.tab.tab>*>:where(:first-child) {
    --bd-borderEndStartRadius: 0px;
    --bd-borderEndEndRadius: 0px;
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l.tab.tab>*>:where(:first-child) {
    --bd-borderStartEndRadius: 0px;
    --bd-borderEndEndRadius: 0px;
}

:is(.inline, .inline-start, .inline-end).dtw9l.tab.tab>*>:where(:first-child):is(.passivating, :not(:is(.activated, .activating, [aria-checked]:not([aria-checked="false"]), [aria-pressed]:not([aria-pressed="false"]), [aria-selected]:not([aria-selected="false"]), :checked, .passivating))):nth-child(n) {
    border-inline-width: 0;
    border-block-start-width: 0;
    --bd-borderStartStartRadius: 0px;
    --bd-borderStartEndRadius: 0px;
    padding-inline: calc(var(--pd-paddingInline) + var(--bd-borderWidth));
    padding-block-start: calc(var(--pd-paddingBlock) + var(--bd-borderWidth));
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l.tab.tab>*>:where(:first-child):is(.passivating, :not(:is(.activated, .activating, [aria-checked]:not([aria-checked="false"]), [aria-pressed]:not([aria-pressed="false"]), [aria-selected]:not([aria-selected="false"]), :checked, .passivating))):nth-child(n) {
    border-block-width: 0;
    border-inline-start-width: 0;
    --bd-borderStartStartRadius: 0px;
    --bd-borderEndStartRadius: 0px;
    padding-block: calc(var(--pd-paddingBlock) + var(--bd-borderWidth));
    padding-inline-start: calc(var(--pd-paddingInline) + var(--bd-borderWidth));
}

:is(.inline, .inline-start, .inline-end).dtw9l.tab.tab>*>:where(:first-child):is(:is(.activating, [aria-checked]:not([aria-checked="false"]), [aria-pressed]:not([aria-pressed="false"]), [aria-selected]:not([aria-selected="false"]), :checked):not(:is(.activated, .passivating)), .activated) {
    border-block-end-width: 0;
    padding-block-end: calc(var(--pd-paddingBlock) + var(--bd-borderWidth));
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l.tab.tab>*>:where(:first-child):is(:is(.activating, [aria-checked]:not([aria-checked="false"]), [aria-pressed]:not([aria-pressed="false"]), [aria-selected]:not([aria-selected="false"]), :checked):not(:is(.activated, .passivating)), .activated) {
    border-inline-end-width: 0;
    padding-inline-end: calc(var(--pd-paddingInline) + var(--bd-borderWidth));
}

.dtw9l.breadcrumb.breadcrumb>*:not(:where(.overlay, .foreign, :first-child, .first-visible-child))::before {
    mask-size: contain;
    -webkit-mask-size: contain;
    mask-repeat: no-repeat;
    -webkit-mask-repeat: no-repeat;
    mask-position: center;
    -webkit-mask-position: center;
    mask-image: var(--icon-image);
    -webkit-mask-image: var(--icon-image);
    background: var(--icon-color);
    --icon-image: var(--list-breadcrumbSeparatorImage);
    --icon-color: var(--bg-altBackgColor);
    display: block;
    content: "";
    flex: 0 0 auto;
    inline-size: var(--list-breadcrumbSeparatorInlineSize);
    block-size: var(--list-breadcrumbSeparatorBlockSize);
    margin-inline: var(--list-breadcrumbSeparatorMarginInline);
    margin-block: var(--list-breadcrumbSeparatorMarginBlock);
}

.dtw9l.breadcrumb.breadcrumb>*>:where(:first-child) {
    line-height: 1;
    padding-inline: var(--list-breadcrumbPaddingInline);
    padding-block: var(--list-breadcrumbPaddingBlock);
}

:not(:is(.inline, .inline-start, .inline-end)).dtw9l.breadcrumb.breadcrumb>* {
    --list-breadcrumbSeparatorImage: var(--list-breadcrumbSeparatorImageBlock);
    --list-breadcrumbSeparatorInlineSize: var(--list-breadcrumbSeparatorInlineSizeBlock);
    --list-breadcrumbSeparatorBlockSize: var(--list-breadcrumbSeparatorBlockSizeBlock);
    --list-breadcrumbSeparatorMarginInline: var(--list-breadcrumbSeparatorMarginInlineBlock);
    --list-breadcrumbSeparatorMarginBlock: var(--list-breadcrumbSeparatorMarginBlockBlock);
}

.dtw9l.bullet.bullet {
    justify-content: space-between;
    align-items: center;
    gap: var(--list-bulletSpacing);
}

.dtw9l.bullet.bullet>* {
    flex: 0 0 auto;
}

.dtw9l.bullet.bullet>*>:where(:first-child) {
    display: flex;
    flex-direction: inherit;
    justify-content: inherit;
    align-items: inherit;
    flex-wrap: inherit;
    flex: inherit;
    overflow: hidden;
    transition: var(--list-bulletTransition);
    padding: var(--list-bulletPadding);
    border: var(--bd-border);
    border-start-start-radius: var(--bd-borderStartStartRadius);
    border-start-end-radius: var(--bd-borderStartEndRadius);
    border-end-start-radius: var(--bd-borderEndStartRadius);
    border-end-end-radius: var(--bd-borderEndEndRadius);
    --bd-borderColorFn: var(--th-borderCond, var(--th-border, var(--list-borderColor)));
    --bd-borderColor: var(--ol-foregTg, var(--bd-borderColorFn));
    --bd-borderStyle: var(--list-borderStyle);
    --bd-borderWidth: var(--list-borderWidth);
    --bd-border: var(--bd-borderStyle) var(--bd-borderWidth) var(--bd-borderColor);
    --bd-borderStartStartRadius: var(--list-borderRadius);
    --bd-borderStartEndRadius: var(--list-borderRadius);
    --bd-borderEndStartRadius: var(--list-borderRadius);
    --bd-borderEndEndRadius: var(--list-borderRadius);
    --bd-borderRadius: var(--bd-borderStartStartRadius) var(--bd-borderStartEndRadius) var(--bd-borderEndEndRadius) var(--bd-borderEndStartRadius);
}

.dtw9l.numbered.numbered {
    counter-reset: ListNumber;
}

.dtw9l.numbered.numbered>*>:where(:first-child):not(.void)::before {
    counter-increment: ListNumber;
    content: var(--list-numberedContent);
}

.dtw9l.gradient,
.gradient.dtw9l {
    --gd-gradientPr: ;
}

.dtw9l.not-gradient,
.not-gradient.dtw9l {
    --gd-gradientPr: initial;
}

:where(.dtw9l):not(:is(.gradient.dtw9l, .dtw9l.gradient, .not-gradient.dtw9l, .dtw9l.not-gradient)) {
    --gd-gradientPr: inherit;
}

.dtw9l.outlined,
.outlined.dtw9l {
    --ol-outlinedPr: ;
}

.dtw9l.not-outlined,
.not-outlined.dtw9l {
    --ol-outlinedPr: initial;
}

:where(.dtw9l):not(:is(.outlined.dtw9l, .dtw9l.outlined, .not-outlined.dtw9l, .dtw9l.not-outlined)) {
    --ol-outlinedPr: inherit;
}

.dtw9l.thPrimary {
    --th-backg: var(--col-primary);
    --th-foreg: var(--col-primaryText);
    --th-border: var(--col-primaryBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-primaryMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-primaryThin);
}

.dtw9l.thSecondary {
    --th-backg: var(--col-secondary);
    --th-foreg: var(--col-secondaryText);
    --th-border: var(--col-secondaryBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-secondaryMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-secondaryThin);
}

.dtw9l.thSuccess {
    --th-backg: var(--col-success);
    --th-foreg: var(--col-successText);
    --th-border: var(--col-successBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-successMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-successThin);
}

.dtw9l.thInfo {
    --th-backg: var(--col-info);
    --th-foreg: var(--col-infoText);
    --th-border: var(--col-infoBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-infoMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-infoThin);
}

.dtw9l.thWarning {
    --th-backg: var(--col-warning);
    --th-foreg: var(--col-warningText);
    --th-border: var(--col-warningBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-warningMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-warningThin);
}

.dtw9l.thDanger {
    --th-backg: var(--col-danger);
    --th-foreg: var(--col-dangerText);
    --th-border: var(--col-dangerBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-dangerMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-dangerThin);
}

.dtw9l.thLight {
    --th-backg: var(--col-light);
    --th-foreg: var(--col-lightText);
    --th-border: var(--col-lightBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-lightMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-lightThin);
}

.dtw9l.thDark {
    --th-backg: var(--col-dark);
    --th-foreg: var(--col-darkText);
    --th-border: var(--col-darkBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-darkMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-darkThin);
}

.dtw9l.mild,
.mild.dtw9l {
    --mi-mildPr: ;
}

.dtw9l.not-mild,
.not-mild.dtw9l {
    --mi-mildPr: initial;
}

:where(.dtw9l):not(:is(.mild.dtw9l, .dtw9l.mild, .not-mild.dtw9l, .dtw9l.not-mild)) {
    --mi-mildPr: inherit;
}

.dtw9l.nude,
.nude.dtw9l {
    background: none !important;
    --bd-borderWidth: 0px;
    --bd-borderStartStartRadius: 0px;
    --bd-borderStartEndRadius: 0px;
    --bd-borderEndStartRadius: 0px;
    --bd-borderEndEndRadius: 0px;
    box-shadow: none !important;
    --pd-paddingInline: 0px;
    --pd-paddingBlock: 0px;
    --nu-nudePr: ;
}

:where(.dtw9l):not(:is(.nude.dtw9l, .dtw9l.nude)) {
    --nu-nudePr: initial;
}

.dtw9l.szSm {
    --bsc-borderRadius: var(--bsc-borderRadiusSm);
    --bsc-paddingInline: var(--bsc-paddingInlineSm);
    --bsc-paddingBlock: var(--bsc-paddingBlockSm);
    --bsc-fontSize: var(--bsc-fontSizeSm);
    --list-borderRadius: var(--list-borderRadiusSm);
    --list-buttonSpacing: var(--list-buttonSpacingSm);
    --list-breadcrumbPaddingInline: var(--list-breadcrumbPaddingInlineSm);
    --list-breadcrumbPaddingBlock: var(--list-breadcrumbPaddingBlockSm);
    --list-bulletSpacing: var(--list-bulletSpacingSm);
    --list-bulletPadding: var(--list-bulletPaddingSm);
}

.dtw9l.szLg {
    --bsc-borderRadius: var(--bsc-borderRadiusLg);
    --bsc-paddingInline: var(--bsc-paddingInlineLg);
    --bsc-paddingBlock: var(--bsc-paddingBlockLg);
    --bsc-fontSize: var(--bsc-fontSizeLg);
    --list-borderRadius: var(--list-borderRadiusLg);
    --list-buttonSpacing: var(--list-buttonSpacingLg);
    --list-breadcrumbPaddingInline: var(--list-breadcrumbPaddingInlineLg);
    --list-breadcrumbPaddingBlock: var(--list-breadcrumbPaddingBlockLg);
    --list-bulletSpacing: var(--list-bulletSpacingLg);
    --list-bulletPadding: var(--list-bulletPaddingLg);
}

.dtw9l.enabling.enabling.enabling {
    --di-filter: var(--indi-filterDisable);
    --di-anim: var(--indi-animEnable);
}

.dtw9l:is(.disabling, [aria-disabled]:not([aria-disabled="false"]), :disabled):not(:is(.enabling, .disabled)) {
    --di-filter: var(--indi-filterDisable);
    --di-anim: var(--indi-animDisable);
}

.dtw9l.disabled.disabled.disabled {
    --di-filter: var(--indi-filterDisable);
}

.dtw9l.activated.activated.activated {
    --ac-filter: var(--ac-filterActive);
}

.dtw9l:is(.activating, [aria-checked]:not([aria-checked="false"]), [aria-pressed]:not([aria-pressed="false"]), [aria-selected]:not([aria-selected="false"]), :checked):not(:is(.activated, .passivating)) {
    --ac-filter: var(--ac-filterActive);
    --ac-anim: var(--ac-animActive);
}

.dtw9l.passivating.passivating.passivating {
    --ac-filter: var(--ac-filterActive);
    --ac-anim: var(--ac-animPassive);
}

.dtw9l:is(:is(.activating, [aria-checked]:not([aria-checked="false"]), [aria-pressed]:not([aria-pressed="false"]), [aria-selected]:not([aria-selected="false"]), :checked):not(:is(.activated, .passivating)), .activated) {
    --ol-outlinedSw: initial;
    --mi-mildSw: initial;
}