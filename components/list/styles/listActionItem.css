.utzaw {
    --fo-boxShadow: var(--an-boxShadowNone);
    --ex-filter: var(--an-filterNone);
    --di-filter: var(--an-filterNone);
    --ac-filter: var(--an-filterNone);
    --in-filter: var(--an-filterNone);
    --cl-filter: var(--an-filterNone);
    --ex-anim: var(--an-animNone);
    --co-anim: var(--an-animNone);
    --di-anim: var(--an-animNone);
    --ac-anim: var(--an-animNone);
    --fo-anim: var(--an-animNone);
    --in-anim: var(--an-animNone);
    --cl-anim: var(--an-animNone);
    --iv-animValid: var(--an-animNone);
    --iv-animInvalid: var(--an-animNone);
    appearance: none;
    box-sizing: unset;
    background-color: unset;
    color: unset;
    margin: unset;
    padding: unset;
    font: unset;
    text-rendering: unset;
    text-transform: unset;
    text-indent: unset;
    text-shadow: unset;
    text-align: unset;
    letter-spacing: unset;
    word-spacing: unset;
    display: block;
    background: var(--bg-backg);
    color: var(--fg-foreg);
    border-style: var(--bsc-borderStyle);
    border-width: var(--bsc-borderWidth);
    border-color: var(--bsc-borderColor);
    border-radius: var(--bsc-borderRadius);
    transition-duration: var(--bsc-transitionDuration);
    transition: var(--bsc-transition);
    padding-inline: var(--pd-paddingInline);
    padding-block: var(--pd-paddingBlock);
    font-size: var(--bsc-fontSize);
    font-family: var(--bsc-fontFamily);
    font-weight: var(--bsc-fontWeight);
    font-style: var(--bsc-fontStyle);
    text-decoration: var(--bsc-textDecoration);
    line-height: var(--bsc-lineHeight);
    border: var(--bd-border);
    border-start-start-radius: var(--bd-borderStartStartRadius);
    border-start-end-radius: var(--bd-borderStartEndRadius);
    border-end-start-radius: var(--bd-borderEndStartRadius);
    border-end-end-radius: var(--bd-borderEndEndRadius);
    box-shadow: var(--an-boxShadow);
    filter: var(--an-filter);
    animation: var(--an-anim);
    --bg-backgNone: linear-gradient(transparent, transparent) border-box;
    --bg-backgColorFn: var(--th-backgCond, var(--th-backg, var(--bsc-backg)));
    --bg-altBackgColorFn: var(--th-altBackgCond, var(--th-altBackg, var(--bsc-altBackg)));
    --bg-backgColor: var(--ol-backgTg, var(--mi-backgTg, var(--bg-backgColorFn)));
    --bg-altBackgColor: var(--ol-altBackgTg, var(--mi-altBackgTg, var(--bg-altBackgColorFn)));
    --bg-backg: var(--gd-backgGradTg, var(--bg-backgNone)), var(--ol-noBackgTg, var(--bg-backgColor));
    --bg-altBackg: var(--gd-backgGradTg, var(--bg-backgNone)), var(--ol-noBackgTg, var(--bg-altBackgColor));
    --fg-foregFn: var(--th-foregCond, var(--th-foreg, var(--bsc-foreg)));
    --fg-altForegFn: var(--th-altForegCond, var(--th-altForeg, var(--bsc-altForeg)));
    --fg-foreg: var(--ol-foregTg, var(--mi-foregTg, var(--fg-foregFn)));
    --fg-altForeg: var(--ol-altForegTg, var(--mi-altForegTg, var(--fg-altForegFn)));
    --bd-borderColorFn: var(--th-borderCond, var(--th-border, var(--bsc-borderColor)));
    --bd-borderColor: var(--ol-foregTg, var(--bd-borderColorFn));
    --bd-border: var(--bd-borderStyle) var(--bd-borderWidth) var(--bd-borderColor);
    --bd-borderRadius: var(--bd-borderStartStartRadius) var(--bd-borderStartEndRadius) var(--bd-borderEndEndRadius) var(--bd-borderEndStartRadius);
    --ri-ringFn: var(--th-ringCond, var(--th-ring, var(--bsc-ring)));
    --ri-ring: var(--ri-ringFn);
    --an-boxShadowNone: 0 0 transparent;
    --an-filterNone: brightness(100%);
    --an-transformNone: translate(0);
    --an-animNone: none;
    --an-boxShadow: var(--fo-boxShadow), var(--an-boxShadowNone);
    --an-filter: var(--ex-filter) var(--di-filter) var(--ac-filter) var(--in-filter) var(--cl-filter) var(--an-filterNone);
    --an-transform: var(--an-transformNone);
    --an-anim: var(--ex-anim), var(--co-anim), var(--di-anim), var(--ac-anim), var(--fo-anim), var(--in-anim), var(--cl-anim), var(--iv-animValid), var(--iv-animInvalid), var(--an-animNone);
    --pd-paddingInline: var(--bsc-paddingInline);
    --pd-paddingBlock: var(--bsc-paddingBlock);
    --pd-padding: var(--pd-paddingBlock) var(--pd-paddingInline);
    position: relative;
    user-select: none;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
    cursor: var(--act-cursor);
    --gd-backgGrad: var(--bsc-backgGrad);
    --gd-gradientSw: var(--gd-gradientPr);
    --gd-backgGradTg: var(--gd-gradientSw) var(--gd-backgGrad);
    --ol-outlinedSw: var(--ol-outlinedPr);
    --ol-backgFn: var(--th-backgMildCond, var(--th-backgMild, var(--bsc-backg)));
    --ol-foregFn: var(--th-foregOutlinedCond, var(--th-foregOutlined, var(--bsc-foreg)));
    --ol-altBackgFn: var(--th-altBackgOutlinedCond, var(--th-altBackgOutlined, var(--bsc-altBackg)));
    --ol-altForegFn: var(--th-altForegOutlinedCond, var(--th-altForegOutlined, var(--bsc-altForeg)));
    --ol-noBackgTg: var(--ol-outlinedSw) transparent;
    --ol-backgTg: var(--ol-outlinedSw) var(--ol-backgFn);
    --ol-foregTg: var(--ol-outlinedSw) var(--ol-foregFn);
    --ol-altBackgTg: var(--ol-outlinedSw) var(--ol-altBackgFn);
    --ol-altForegTg: var(--ol-outlinedSw) var(--ol-altForegFn);
    --mi-mildSw: var(--mi-mildPr);
    --mi-backgFn: var(--th-backgMildCond, var(--th-backgMild, var(--bsc-backg)));
    --mi-foregFn: var(--th-foregMildCond, var(--th-foregMild, var(--bsc-foreg)));
    --mi-altBackgFn: var(--th-altBackgMildCond, var(--th-altBackgMild, var(--bsc-altBackg)));
    --mi-altForegFn: var(--th-altForegMildCond, var(--th-altForegMild, var(--bsc-altForeg)));
    --mi-backgTg: var(--mi-mildSw) var(--mi-backgFn);
    --mi-foregTg: var(--mi-mildSw) var(--mi-foregFn);
    --mi-altBackgTg: var(--mi-mildSw) var(--mi-altBackgFn);
    --mi-altForegTg: var(--mi-mildSw) var(--mi-altForegFn);
    --nu-nudeSw: var(--nu-nudePr);
    --ac-filterActive: var(--indi-filterActive);
    --ac-animActive: var(--indi-animActive);
    --ac-animPassive: var(--indi-animPassive);
    --fo-boxShadowLy: var(--ctrl-boxShadowFocus) var(--ri-ring);
    --cl-filterPress: var(--act-filterPress);
    --cl-animPress: var(--act-animPress);
    --cl-animRelease: var(--act-animRelease);
    --cl-animPressAsActive: var(--act-animPressAsActive);
    --cl-animReleaseAsPassive: var(--act-animReleaseAsPassive);
}

.utzaw:is(:focus, :focus-visible) {
    outline: unset;
    outline-offset: unset;
}

.utzaw::selection,
.utzaw ::selection {
    background: var(--bg-altBackgColor);
    color: var(--fg-altForeg);
}

.utzaw.szSm {
    --bsc-borderRadius: var(--bsc-borderRadiusSm);
    --bsc-paddingInline: var(--bsc-paddingInlineSm);
    --bsc-paddingBlock: var(--bsc-paddingBlockSm);
    --bsc-fontSize: var(--bsc-fontSizeSm);
}

.utzaw.szLg {
    --bsc-borderRadius: var(--bsc-borderRadiusLg);
    --bsc-paddingInline: var(--bsc-paddingInlineLg);
    --bsc-paddingBlock: var(--bsc-paddingBlockLg);
    --bsc-fontSize: var(--bsc-fontSizeLg);
}

.utzaw.gradient,
.gradient.utzaw {
    --gd-gradientPr: ;
}

.utzaw.not-gradient,
.not-gradient.utzaw {
    --gd-gradientPr: initial;
}

:where(.utzaw):not(:is(.gradient.utzaw, .utzaw.gradient, .not-gradient.utzaw, .utzaw.not-gradient)) {
    --gd-gradientPr: inherit;
}

.utzaw.outlined,
.outlined.utzaw {
    --ol-outlinedPr: ;
}

.utzaw.not-outlined,
.not-outlined.utzaw {
    --ol-outlinedPr: initial;
}

:where(.utzaw):not(:is(.outlined.utzaw, .utzaw.outlined, .not-outlined.utzaw, .utzaw.not-outlined)) {
    --ol-outlinedPr: inherit;
}

.utzaw.thPrimary {
    --th-backg: var(--col-primary);
    --th-foreg: var(--col-primaryText);
    --th-border: var(--col-primaryBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-primaryMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-primaryThin);
}

.utzaw.thSecondary {
    --th-backg: var(--col-secondary);
    --th-foreg: var(--col-secondaryText);
    --th-border: var(--col-secondaryBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-secondaryMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-secondaryThin);
}

.utzaw.thSuccess {
    --th-backg: var(--col-success);
    --th-foreg: var(--col-successText);
    --th-border: var(--col-successBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-successMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-successThin);
}

.utzaw.thInfo {
    --th-backg: var(--col-info);
    --th-foreg: var(--col-infoText);
    --th-border: var(--col-infoBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-infoMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-infoThin);
}

.utzaw.thWarning {
    --th-backg: var(--col-warning);
    --th-foreg: var(--col-warningText);
    --th-border: var(--col-warningBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-warningMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-warningThin);
}

.utzaw.thDanger {
    --th-backg: var(--col-danger);
    --th-foreg: var(--col-dangerText);
    --th-border: var(--col-dangerBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-dangerMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-dangerThin);
}

.utzaw.thLight {
    --th-backg: var(--col-light);
    --th-foreg: var(--col-lightText);
    --th-border: var(--col-lightBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-lightMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-lightThin);
}

.utzaw.thDark {
    --th-backg: var(--col-dark);
    --th-foreg: var(--col-darkText);
    --th-border: var(--col-darkBold);
    --th-altBackg: var(--th-backgMild);
    --th-altForeg: var(--th-foregMild);
    --th-foregOutlined: var(--th-backg);
    --th-altBackgOutlined: var(--th-backg);
    --th-altForegOutlined: var(--th-foreg);
    --th-backgMild: var(--col-darkMild);
    --th-foregMild: var(--th-border);
    --th-altBackgMild: var(--th-backg);
    --th-altForegMild: var(--th-foreg);
    --th-ring: var(--col-darkThin);
}

.utzaw.mild,
.mild.utzaw {
    --mi-mildPr: ;
}

.utzaw.not-mild,
.not-mild.utzaw {
    --mi-mildPr: initial;
}

:where(.utzaw):not(:is(.mild.utzaw, .utzaw.mild, .not-mild.utzaw, .utzaw.not-mild)) {
    --mi-mildPr: inherit;
}

.utzaw.nude,
.nude.utzaw {
    background: none !important;
    --bd-borderWidth: 0px;
    --bd-borderStartStartRadius: 0px;
    --bd-borderStartEndRadius: 0px;
    --bd-borderEndStartRadius: 0px;
    --bd-borderEndEndRadius: 0px;
    box-shadow: none !important;
    --pd-paddingInline: 0px;
    --pd-paddingBlock: 0px;
    --nu-nudePr: ;
}

:where(.utzaw):not(:is(.nude.utzaw, .utzaw.nude)) {
    --nu-nudePr: initial;
}

.utzaw.enabling.enabling.enabling {
    --di-filter: var(--indi-filterDisable);
    --di-anim: var(--indi-animEnable);
}

.utzaw:is(.disabling, [aria-disabled]:not([aria-disabled="false"]), :disabled):not(:is(.enabling, .disabled)) {
    --di-filter: var(--indi-filterDisable);
    --di-anim: var(--indi-animDisable);
}

.utzaw.disabled.disabled.disabled {
    --di-filter: var(--indi-filterDisable);
}

.utzaw.activated.activated.activated {
    --ac-filter: var(--ac-filterActive);
}

.utzaw:is(.activating, [aria-checked]:not([aria-checked="false"]), [aria-pressed]:not([aria-pressed="false"]), [aria-selected]:not([aria-selected="false"]), :checked):not(:is(.activated, .passivating)) {
    --ac-filter: var(--ac-filterActive);
    --ac-anim: var(--ac-animActive);
}

.utzaw.passivating.passivating.passivating {
    --ac-filter: var(--ac-filterActive);
    --ac-anim: var(--ac-animPassive);
}

.utzaw.focused.focused.focused {
    --fo-boxShadow: var(--fo-boxShadowLy);
}

.utzaw:is(.focusing, :is(:focus-visible, :focus:where([data-assertive-focusable]), :has(:focus-visible, :focus:where([data-assertive-focusable]))):not(:is(.disabling, [aria-disabled]:not([aria-disabled="false"]), .disabled, .focused, .blurring, .blurred))) {
    --fo-boxShadow: var(--fo-boxShadowLy);
    --fo-anim: var(--ctrl-animFocus);
}

.utzaw.arrived.arrived.arrived {
    --in-filter: var(--ctrl-filterArrive);
}

.utzaw:is(.arriving, :is(:hover, .focused, .focusing, :is(:focus-visible, :focus:where([data-assertive-focusable]), :has(:focus-visible, :focus:where([data-assertive-focusable]))):not(:is(.blurring, .blurred))):not(:is(.disabling, [aria-disabled]:not([aria-disabled="false"]), .disabled, .arrived, .leaving, .leaved))) {
    --in-filter: var(--ctrl-filterArrive);
    --in-anim: var(--ctrl-animArrive);
}

.utzaw.leaving.leaving.leaving {
    --in-filter: var(--ctrl-filterArrive);
    --in-anim: var(--ctrl-animLeave);
}

.utzaw:is(:is(.disabling, [aria-disabled]:not([aria-disabled="false"]), :disabled):not(:is(.enabling, .disabled)), .disabled) {
    cursor: var(--ctrl-cursorDisable);
}

.utzaw.blurring.blurring.blurring {
    --fo-boxShadow: var(--fo-boxShadowLy);
    --fo-anim: var(--ctrl-animBlur);
    z-index: 1;
}

.utzaw.pressed.pressed.pressed {
    --cl-filter: var(--cl-filterPress);
}

.utzaw.pressing.pressing.pressing {
    --cl-filter: var(--cl-filterPress);
    --cl-anim: var(--cl-animPress);
}

.utzaw.releasing.releasing.releasing {
    --cl-filter: var(--cl-filterPress);
    --cl-anim: var(--cl-animRelease);
}
